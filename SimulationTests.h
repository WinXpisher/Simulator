#pragma once
#include "SimulatorPrimitives.h"

// ТЕСТ 1 - постійно зайнятий ресурс, простою ресурсів - 0%.
// Також демонструє як завдання з низьким коефіцієнтом
// зв'язності задач розділяється на менші завдання
void fillTasks1(DataBase& db)
{
    Task t1 = {
        Task::generateId(),
        Task::WAITING,
        10, // кількість задач
        {
            "x86",
            "Windows 10",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.2,  // коефіцієнт зв'язності задач у завданні
        5,    // пріоритет завдання
        6,    // час виконання однієї задачі
        20    // розмір задачі
    };
    db.tasks.push_back(t1);
}

void fillResources1(DataBase& db)
{
    Resource r1 = {
        Resource::generateId(),
        {
            "x86",
            "Windows 10",
            2,  // кількість процесорів
            10, // швидкодія процесорів
            64,  // об'єм оперативної пам'яті
            3000 // доступний обсяг вінчестера
        },
        10, // пропускна здатність каналу
    };
    db.availableResources.push_back(r1);
}


// ТЕСТ 2 - середній час очікування дорівнює 0.
// Завдання відправляються одразу.
// Також половина ресурсів буде простоювати, тому
// простой ресурсів буде 50%.
// !!! Опис тесту коректний, коли кількість каналів зв'язку дорівнює 2.
void fillTasks2(DataBase& db)
{
    Task t = {
        Task::generateId(),
        Task::WAITING,
        1, // кількість задач
        {
            "x86",
            "Windows 10",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.2,  // коефіцієнт зв'язності задач у завданні
        5,    // пріоритет завдання
        25,    // час виконання однієї задачі
        50    // розмір задачі
    };
    // додається 2 одинакових завдання з різними айді
    db.tasks.push_back(t);
    t.id = Task::generateId();
    db.tasks.push_back(t);
}

void fillResources2(DataBase& db)
{
    Resource r = {
        Resource::generateId(),
        {
            "x86",
            "Windows 10",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            64,  // об'єм оперативної пам'яті
            3000 // доступний обсяг вінчестера
        },
        10, // пропускна здатність каналу
    };
    // додається 4 одинакових ресурса з різними айді
    db.availableResources.push_back(r);
    r.id = Resource::generateId();
    db.availableResources.push_back(r);
    r.id = Resource::generateId();
    db.availableResources.push_back(r);
    r.id = Resource::generateId();
    db.availableResources.push_back(r);
}



// ТЕСТ 3 - багато задач і ресурсів.
// Добре демонструє пул відправки і метод розподілу.
// Також одне з завдань скасовується, через відсутність
// підходящого ресурсу.
void fillTasks3(DataBase& db)
{
    Task t1 = {
        Task::generateId(),
        Task::WAITING,
        6, // кількість задач
        {
            "x86",
            "Windows 10",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.2,  // коефіцієнт зв'язності задач у завданні
        5,    // пріоритет завдання
        6,    // час виконання однієї задачі
        20    // розмір задачі
    };
    db.tasks.push_back(t1);

    Task t2 = {
        Task::generateId(),
        Task::WAITING,
        3, // кількість задач
        {
            "x86",
            "Windows 10",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.4,  // коефіцієнт зв'язності задач у завданні
        1,    // пріоритет завдання
        6,    // час виконання однієї задачі
        10    // розмір задачі
    };
    db.tasks.push_back(t2);

    Task t3 = {
        Task::generateId(),
        Task::WAITING,
        6, // кількість задач
        {
            "x86",
            "Windows 10",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.5,  // коефіцієнт зв'язності задач у завданні
        3,    // пріоритет завдання
        6,    // час виконання однієї задачі
        10    // розмір задачі
    };
    db.tasks.push_back(t3);

    Task t4 = {
        Task::generateId(),
        Task::WAITING,
        5, // кількість задач
        {
            "x86",
            "Windows 11",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.6,  // коефіцієнт зв'язності задач у завданні
        7,    // пріоритет завдання
        6,    // час виконання однієї задачі
        20    // розмір задачі
    };
    db.tasks.push_back(t4);

    Task t5 = {
        Task::generateId(),
        Task::WAITING,
        5, // кількість задач
        {
            "x86",
            "Windows 11",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.6,  // коефіцієнт зв'язності задач у завданні
        4,    // пріоритет завдання
        36,    // час виконання однієї задачі
        20    // розмір задачі
    };
    db.tasks.push_back(t5);

    Task t6 = {
        Task::generateId(),
        Task::WAITING,
        5, // кількість задач
        {
            "x86",
            "Windows 11",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.6,  // коефіцієнт зв'язності задач у завданні
        9,    // пріоритет завдання
        60,    // час виконання однієї задачі
        20    // розмір задачі
    };
    db.tasks.push_back(t6);

    Task t7 = {
        Task::generateId(),
        Task::WAITING,
        5, // кількість задач
        {
            "x86",
            "Windows 11",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            8,  // об'єм оперативної пам'яті
            512 // доступний обсяг вінчестера
        },
        0.6,  // коефіцієнт зв'язності задач у завданні
        5,    // пріоритет завдання
        30,    // час виконання однієї задачі
        20    // розмір задачі
    };
    db.tasks.push_back(t7);
}

void fillResources3(DataBase& db)
{
    Resource r1 = {
        Resource::generateId(),
        {
            "x86",
            "Windows 10",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            64,  // об'єм оперативної пам'яті
            3000 // доступний обсяг вінчестера
        },
        10, // пропускна здатність каналу
    };
    db.availableResources.push_back(r1);

    Resource r2 = {
        Resource::generateId(),
        {
            "x86",
            "Windows 10",
            3,  // кількість процесорів
            10, // швидкодія процесорів
            300,  // об'єм оперативної пам'яті
            2000 // доступний обсяг вінчестера
        },
        10, // пропускна здатність каналу
    };
    db.availableResources.push_back(r2);
    
    Resource r3 = {
        Resource::generateId(),
        {
            "x86",
            "Windows 11",
            10,  // кількість процесорів
            10, // швидкодія процесорів
            80,  // об'єм оперативної пам'яті
            4000 // доступний обсяг вінчестера
        },
        5, // пропускна здатність каналу
    };
    db.availableResources.push_back(r3);

    Resource r4 = {
        Resource::generateId(),
        {
            "x86",
            "Windows 10",
            1,  // кількість процесорів
            10, // швидкодія процесорів
            64,  // об'єм оперативної пам'яті
            3000 // доступний обсяг вінчестера
        },
        10, // пропускна здатність каналу
    };
    db.availableResources.push_back(r4);
    
    Resource r5 = {
        Resource::generateId(),
        {
            "x86",
            "Windows 11",
            10,  // кількість процесорів
            10, // швидкодія процесорів
            80,  // об'єм оперативної пам'яті
            4000 // доступний обсяг вінчестера
        },
        5, // пропускна здатність каналу
    };
    db.availableResources.push_back(r5);
    
    Resource r6 = {
        Resource::generateId(),
        {
            "x86",
            "Windows 11",
            10,  // кількість процесорів
            10, // швидкодія процесорів
            80,  // об'єм оперативної пам'яті
            4000 // доступний обсяг вінчестера
        },
        5, // пропускна здатність каналу
    };
    db.availableResources.push_back(r6);
}